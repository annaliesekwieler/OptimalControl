(-mu_m * n_vector)))/
(mu_m + a_vector * PHM * prev)))))
}
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
mean(out$Ic + out$Is)
predicted_prevalence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
return(mean(out$Ic + out$Is))
}
predicted_incidence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
prev = out$Ic + out$Is
m_vector = rep(rep(m_in_vec, each = 8)[1:2913], times = 5)
a_vector = rep(rep(a_in_vec, each = 8)[1:2913], times = 5)
n_vector = rep(rep(n_in_vec, each = 8)[1:2913], times = 5)
return(mean(out$S * (1 - 2.71828182845904523536 ^ (-PMH * (m_vector * (a_vector ^ 2) * PHM * prev *
(2.71828182845904523536 ^
(-mu_m * n_vector)))/
(mu_m + a_vector * PHM * prev)))))
}
optimizing_function = function(parameters){
bR = parameters[1]
rs = parameters[2]
epsilon = parameters[3]
((predicted_prevalence(bR, rs, epsilon) - prevalence_2020) ^ 2)  +
((predicted_incidence(bR, rs, epsilon) - incidence_2020)^2)
}
optimized_result = optim(par = c(#
0,
.1,
#.5,
# .1,
# 1/10,
50), optimizing_function, method="L-BFGS-B",
lower=c(
-10000,
1/200,
# 0,
# 1/2000,
# 1/30,
1/100), upper = c(
10000,
1/7,
# 1,
# 1/2,
# 1/7
10000
),
control=list(factr=1e-32, maxit=10000))
beep()
optimized_result
optimized_result$par
predicted_prevalence(optimized_result$par[1], optimized_result$par[2],
optimized_result$par[3])
kenya_data[i,"prevalence_2019"]
predicted_incidence(optimized_result$par[1], optimized_result$par[2],
optimized_result$par[3])
(kenya_data[i,"incidence_2020"] / 365)
optimized_result = optim(par = c(#
0,
.1,
#.5,
# .1,
# 1/10,
50), optimizing_function, method="L-BFGS-B",
lower=c(
-10000,
1/200,
# 0,
# 1/2000,
# 1/30,
1/100), upper = c(
10000,
1/7,
# 1,
# 1/2,
# 1/7
10000
),
control=list(factr=1e-32, maxit=100000))
beep()
optimized_result
?optim
calibration_optimizer = function(temps, rainfall, prop_cases_treated, prevalence_2019, incidence_2020,
prevalence_2020){
temps[temps > 31.7] = 31.7
temps[temps < 13.4] = 13.4
temps = c(rollmean(temps, k = 40)[288:326],
rollmean(temps, k = 40))
temps[temps > 31.7] = 31.7
temps[temps < 13.4] = 13.4
predicted_prevalence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
return(mean(out$Ic + out$Is))
}
predicted_incidence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
prev = out$Ic + out$Is
m_vector = rep(rep(m_in_vec, each = 8)[1:2913], times = 5)
a_vector = rep(rep(a_in_vec, each = 8)[1:2913], times = 5)
n_vector = rep(rep(n_in_vec, each = 8)[1:2913], times = 5)
return(mean(out$S * (1 - 2.71828182845904523536 ^ (-PMH * (m_vector * (a_vector ^ 2) * PHM * prev *
(2.71828182845904523536 ^
(-mu_m * n_vector)))/
(mu_m + a_vector * PHM * prev)))))
}
optimizing_function = function(parameters){
bR = parameters[1]
rs = parameters[2]
epsilon = parameters[3]
((predicted_prevalence(bR, rs, epsilon) - prevalence_2020) ^ 2)  +
((predicted_incidence(bR, rs, epsilon) - incidence_2020)^2)
}
optimized_result = optim(par = c(#
0,
.1,
#.5,
# .1,
# 1/10,
50), optimizing_function, method="L-BFGS-B",
lower=c(
-10000,
1/200,
# 0,
# 1/2000,
# 1/30,
1/100), upper = c(
10000,
1/7,
# 1,
# 1/2,
# 1/7
10000
),
control=list(factr=1e-32, maxit=100000))
return(list(predicted_prevalence(optimized_result$par[1], optimized_result$par[2],
optimized_result$par[3]),
predicted_incidence(optimized_result$par[1], optimized_result$par[2],
optimized_result$par[3]),
list(optimized_result$par), optimized_result$convergence))
}
i=1
i=2
calibration_optimizer(temps = kenya_temp[[i]]$daily_temp,
rainfall = kenya_rainfall[[i]],
prop_cases_treated = kenya_data[i, "prop_cases"],
prevalence_2019 = kenya_data[i,"prevalence_2019"],
incidence_2020 = (kenya_data[i,"incidence_2020"] / 365),
prevalence_2020 = kenya_data[i, "prevalence_2020"])
beep()
kenya_data[i,"prevalence_2019"]
temps = kenya_temp[[i]]$daily_temp
rainfall = kenya_rainfall[[i]]
prop_cases_treated = kenya_data[i, "prop_cases"]
prevalence_2019 = kenya_data[i,"prevalence_2019"]
incidence_2020 = (kenya_data[i,"incidence_2020"] / 365)
prevalence_2020 = kenya_data[i, "prevalence_2020"]
temps[temps > 31.7] = 31.7
temps[temps < 13.4] = 13.4
temps = c(rollmean(temps, k = 40)[288:326],
rollmean(temps, k = 40))
temps[temps > 31.7] = 31.7
temps[temps < 13.4] = 13.4
predicted_prevalence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
return(mean(out$Ic + out$Is))
}
predicted_incidence = function(bR, rs, epsilon){
m_in_vec = rep(m(temps,  epsilon, mu_m, c.RD = rainfall, aR, bR),
times = 5)
a_in_vec = rep(a(temps), times = 5)
n_in_vec = rep(n(temps), times = 5)
t = seq(1, 365 * 5, by =1/8)
PHM = .125
PMH = 0.5
model = SEI_model$new(S_init = 1 - .01 - prevalence_2019,
E_init=.01,
Ic_init = prevalence_2019 * prop_cases_treated,
Is_init = prevalence_2019 * (1-prop_cases_treated),
deltaT = population_data_kenya_2020$death_rate / 365,
mut = population_data_kenya_2020$birth_rate / 365,
rs = rs,
epsilon = epsilon,
c = prop_cases_treated,
mu_m = mu_m,
m_in = m_in_vec,
a_in = a_in_vec,
n_in = n_in_vec,
tvec_spline = seq(1, 365*5))
out = model$run(t)
out=as.data.frame(out)
prev = out$Ic + out$Is
m_vector = rep(rep(m_in_vec, each = 8)[1:2913], times = 5)
a_vector = rep(rep(a_in_vec, each = 8)[1:2913], times = 5)
n_vector = rep(rep(n_in_vec, each = 8)[1:2913], times = 5)
return(mean(out$S * (1 - 2.71828182845904523536 ^ (-PMH * (m_vector * (a_vector ^ 2) * PHM * prev *
(2.71828182845904523536 ^
(-mu_m * n_vector)))/
(mu_m + a_vector * PHM * prev)))))
}
optimizing_function = function(parameters){
bR = parameters[1]
rs = parameters[2]
epsilon = parameters[3]
((predicted_prevalence(bR, rs, epsilon) - prevalence_2020) ^ 2)  +
((predicted_incidence(bR, rs, epsilon) - incidence_2020)^2)
}
optimized_result = optim(par = c(#
0,
.1,
#.5,
# .1,
# 1/10,
50), optimizing_function, method="L-BFGS-B",
lower=c(
-10000,
1/200,
# 0,
# 1/2000,
# 1/30,
1/100), upper = c(
10000,
1/7,
# 1,
# 1/2,
# 1/7
10000
),
control=list(factr=1e-32, maxit=100000))
beep()
optimized_result
rm(list=ls())
setwd("~/Dropbox/OptimalControl/data/kenya_climate_data")
load("last_6_days_needed.RData")
nrow(have_both)
setwd("~/Dropbox/OptimalControl/data")
load("kenya_data.RData")
have_both
kenya_data %>%
anti_join(have_both)
need_something  = kenya_data %>%
anti_join(have_both)
nrow(need_something)
nrow(need_something) + nrow(have_both)
library(rlist)
library(lubridate)
rain_files = list.files("../../data/kenya_climate_data/", pattern = "rainfall_data_kenya*")
load(paste0("../../data/kenya_climate_data/", rain_files[[1]]))
result_new = list()
for(i in 1:length(result)){
result_new[[i]] = result[[i]][[1]]
}
setwd("~/Dropbox/OptimalControl/code/getting_climate_data")
library(rlist)
library(lubridate)
# load the parallelized RData files and consolidate into a single list of temperatures
rain_files = list.files("../../data/kenya_climate_data/", pattern = "rainfall_data_kenya*")
load(paste0("../../data/kenya_climate_data/", rain_files[[1]]))
result_new = list()
for(i in 1:length(result)){
result_new[[i]] = result[[i]][[1]]
}
result_all = result_new
for(i in 2:length(rain_files)){
print(i)
load(paste0("../../data/kenya_climate_data/", rain_files[[i]]))
result_new = list()
for(j in 1:length(result)){
result_new[[j]] = result[[j]][[1]]
}
result_all = c(result_all, result_new)
}
rainfall = result_all
num = rep(NA, length(rainfall))
for(i in 1:length(rainfall)){
if(length(rainfall[[i]]) == 1){
num[i] = 0
} else{
num[i] = 1
}
}
# 91% of rasters have a value
mean(num)
temp_files = list.files("../../data/kenya_climate_data/",
pattern = "temp_data_kenya*")
load(paste0("../../data/kenya_climate_data/", temp_files[[1]]))
result_new = list()
for(i in 1:length(result)){
result_new[[i]] = result[[i]]
}
result_all = result_new
for(i in 2:length(temp_files)){
print(i)
load(paste0("../../data/kenya_climate_data/", temp_files[[i]]))
result_new = list()
for(j in 1:length(result)){
result_new[[j]] = result[[j]]
}
result_all = c(result_all, result_new)
}
temp = result_all
num = rep(NA, length(temp))
for(i in 1:length(temp)){
if(length(temp[[i]]$daily_temp) == 0){
num[i] = 0
} else{
num[i] = 1
}
}
# 91% of rasters have a value
mean(num)
lats_longs_temp = data.frame(x = NA, y = NA)
for(i in 1:length(temp)){
if(length(temp[[i]]) == 3){
lats_longs_temp = rbind(lats_longs_temp, head(temp[[i]][,c("x", "y")], 1))
}
}
lats_longs_rain = data.frame(lon = NA, lat = NA)
for(i in 1:length(rainfall)){
if(length(rainfall[[i]]) == 5){
lats_longs_rain = rbind(lats_longs_rain, head(rainfall[[i]][,c("lon", "lat")], 1))
}
}
lats_longs_temp = lats_longs_temp[-1,]
lats_longs_rain = lats_longs_rain[-1,]
head(lats_longs_temp)
head(lats_longs_rain)
beep()
lats_longs_temp
save(lats_longs_rain, lats_longs_temp, file = "../../data/kenya_climate_data/still_needed.RData")
rm(list=ls())
library(chirps)
library(doParallel)
setwd("~/Dropbox/OptimalControl/data")
load("kenya_data.RData")
setwd("~/Dropbox/OptimalControl/data/kenya_climate_data")
load("still_needed.RData")
kenya_data %>%
anti_join(lats_longs_temp)
nrow(lats_longs_temp)
kenya_data = kenya_data %>%
anti_join(lats_longs_temp)
nrow(kenya_data)
nrow(kenya_data) + nrow(lats_longs_temp)
22072 / 500
j=1
1 + 500*(j-1)
ifelse(j == 51, 25049, (500 * j))
j=45
ifelse(j == 51, 25049, (500 * j))
j=44
beginning = 1 + 500*(j-1)
end = ifelse(j == 45, 22072, (500 * j))
beginning:end
nrow(kenya_data)
rm(list=ls())
# calibrates the parameter for every raster in Kenya
library(doParallel)
library(dplyr)
setwd("~/Dropbox/OptimalControl/data")
# load the prevalence, incidence, and proportion of cases that are treated
load("kenya_data.RData")
setwd("~/Dropbox/OptimalControl/data/kenya_climate_data")
# take only those with rainfall and temperature data
load("last_6_days_needed.RData")
kenya_data = have_both %>%
left_join(kenya_data, by=c("x", "y"))
# load temperatures
load("kenya_climate_data.RData")
# load kenya population data
load("population_data_kenya_2020.RData")
setwd("~/Dropbox/OptimalControl/data")
# load kenya population data
load("population_data_kenya_2020.RData")
setwd("~/Dropbox/OptimalControl/code")
# load functions
source("functions.R")
i=1
calibration_optimizer(temps = kenya_temp[[i]]$daily_temp,
rainfall = kenya_rainfall[[i]],
prop_cases_treated = kenya_data[i, "prop_cases"],
prevalence_2019 = kenya_data[i,"prevalence_2019"],
incidence_2020 = (kenya_data[i,"incidence_2020"] / 365),
prevalence_2020 = kenya_data[i, "prevalence_2020"])
